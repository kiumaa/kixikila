#!/usr/bin/env node

/**
 * KIXIKILA - Verificador de Configura√ß√µes Supabase Produ√ß√£o
 * Verifica se as configura√ß√µes cr√≠ticas foram aplicadas corretamente
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const SUPABASE_URL = process.env.VITE_SUPABASE_URL || "https://hkesrohuaurcyonpktyt.supabase.co";
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_ANON_KEY) {
  console.error('‚ùå SUPABASE_ANON_KEY n√£o encontrada');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function verifySupabaseConfig() {
  console.log('üîç Verificando Configura√ß√µes Supabase Dashboard...\n');

  const results = {
    passed: 0,
    failed: 0,
    warnings: 0,
    checks: []
  };

  // Teste 1: Verificar conex√£o com Supabase
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error && error.message !== 'session is null') {
      throw error;
    }
    results.checks.push({ name: 'Conex√£o Supabase', status: '‚úÖ PASS', details: 'Conectado com sucesso' });
    results.passed++;
  } catch (error) {
    results.checks.push({ name: 'Conex√£o Supabase', status: '‚ùå FAIL', details: error.message });
    results.failed++;
  }

  // Teste 2: Verificar se RLS est√° ativo
  try {
    const { data, error } = await supabase.rpc('validate_rls_security');
    if (error) throw error;
    
    const tablesWithRLS = data.filter(table => table.policy_count > 0);
    if (tablesWithRLS.length >= 4) {
      results.checks.push({ name: 'RLS Policies', status: '‚úÖ PASS', details: `${tablesWithRLS.length} tabelas com RLS ativo` });
      results.passed++;
    } else {
      results.checks.push({ name: 'RLS Policies', status: '‚ö†Ô∏è  WARN', details: 'Algumas tabelas podem n√£o ter RLS' });
      results.warnings++;
    }
  } catch (error) {
    results.checks.push({ name: 'RLS Policies', status: '‚ùå FAIL', details: 'N√£o foi poss√≠vel verificar RLS' });
    results.failed++;
  }

  // Teste 3: Verificar URL de produ√ß√£o
  const productionUrls = ['kixikila.pro', 'api.kixikila.pro'];
  const currentUrl = new URL(SUPABASE_URL).hostname;
  
  if (currentUrl.includes('supabase.co')) {
    results.checks.push({ name: 'URL Supabase', status: '‚úÖ PASS', details: 'URL de produ√ß√£o Supabase correta' });
    results.passed++;
  } else {
    results.checks.push({ name: 'URL Supabase', status: '‚ö†Ô∏è  WARN', details: 'Verificar URL de produ√ß√£o' });
    results.warnings++;
  }

  // Teste 4: Testar signup com senha fraca (deve falhar se password protection estiver ativo)
  try {
    const { error } = await supabase.auth.signUp({
      email: `test+${Date.now()}@example.com`,
      password: '123456' // Senha fraca intencional
    });
    
    if (error && error.message.toLowerCase().includes('password')) {
      results.checks.push({ name: 'Password Protection', status: '‚úÖ PASS', details: 'Senhas fracas rejeitadas' });
      results.passed++;
    } else {
      results.checks.push({ name: 'Password Protection', status: '‚ö†Ô∏è  WARN', details: 'Verificar se password protection est√° ativo' });
      results.warnings++;
    }
  } catch (error) {
    results.checks.push({ name: 'Password Protection', status: '‚ö†Ô∏è  WARN', details: 'N√£o foi poss√≠vel testar password protection' });
    results.warnings++;
  }

  // Teste 5: Verificar Edge Functions
  const criticalFunctions = ['send-otp-sms', 'verify-otp', 'security-monitoring', 'production-health'];
  let functionsWorking = 0;

  for (const funcName of criticalFunctions) {
    try {
      const { data, error } = await supabase.functions.invoke(funcName, {
        body: { test: true, healthCheck: true }
      });
      
      // Se n√£o deu erro 404, a fun√ß√£o existe
      if (!error || !error.message.includes('404')) {
        functionsWorking++;
      }
    } catch (e) {
      // Function might exist but not accessible without auth
    }
  }

  if (functionsWorking >= 2) {
    results.checks.push({ name: 'Edge Functions', status: '‚úÖ PASS', details: `${functionsWorking}/${criticalFunctions.length} fun√ß√µes acess√≠veis` });
    results.passed++;
  } else {
    results.checks.push({ name: 'Edge Functions', status: '‚ö†Ô∏è  WARN', details: 'Verificar se Edge Functions est√£o deployadas' });
    results.warnings++;
  }

  // Imprimir resultados
  console.log('üìã RESULTADOS DA VERIFICA√á√ÉO:\n');
  
  results.checks.forEach(check => {
    console.log(`${check.status} ${check.name}`);
    console.log(`   ${check.details}\n`);
  });

  console.log('üìä RESUMO:');
  console.log(`‚úÖ Passou: ${results.passed}`);
  console.log(`‚ö†Ô∏è  Avisos: ${results.warnings}`);
  console.log(`‚ùå Falhou: ${results.failed}\n`);

  // Configura√ß√µes que devem ser feitas MANUALMENTE no dashboard
  console.log('üîß CONFIGURA√á√ïES MANUAIS OBRIGAT√ìRIAS (Dashboard):');
  console.log('');
  console.log('1. üîí Auth Settings (https://supabase.com/dashboard/project/hkesrohuaurcyonpktyt/auth/settings):');
  console.log('   - OTP expiry: 600 segundos (10 minutos)');
  console.log('   - Enable password breach protection: ‚úÖ ATIVADO');
  console.log('   - Password strength requirements: ‚úÖ CONFIGURADO');
  console.log('');
  console.log('2. üåê URL Configuration (https://supabase.com/dashboard/project/hkesrohuaurcyonpktyt/auth/url-configuration):');
  console.log('   - Site URL: https://kixikila.pro');
  console.log('   - Redirect URLs: kixikila.pro/**, api.kixikila.pro/**');
  console.log('');
  console.log('3. ‚ö° Rate Limits (https://supabase.com/dashboard/project/hkesrohuaurcyonpktyt/auth/rate-limits):');
  console.log('   - SMS: 10/hora | Email: 30/hora | Login: 30/hora');
  console.log('');
  console.log('4. üìß SMTP Settings (https://supabase.com/dashboard/project/hkesrohuaurcyonpktyt/auth/templates):');
  console.log('   - Configurar SMTP para emails de produ√ß√£o');
  console.log('');

  if (results.failed > 0) {
    console.log('üö® A√á√ÉO NECESS√ÅRIA: Corrigir falhas antes do deploy!');
    process.exit(1);
  } else if (results.warnings > 0) {
    console.log('‚ö†Ô∏è  RECOMENDA√á√ÉO: Verificar avisos e configurar manualmente no dashboard');
    console.log('‚úÖ Sistema tecnicamente pronto, mas requer configura√ß√µes manual');
    process.exit(0);
  } else {
    console.log('üéâ CONFIGURA√á√ÉO COMPLETA! Sistema pronto para produ√ß√£o!');
    process.exit(0);
  }
}

// Executar verifica√ß√£o
verifySupabaseConfig().catch(error => {
  console.error('‚ùå Erro na verifica√ß√£o:', error.message);
  process.exit(1);
});